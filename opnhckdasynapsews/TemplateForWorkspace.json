{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "opnhckdasynapsews"
		},
		"opnhckdasynapsews-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'opnhckdasynapsews-WorkspaceDefaultSqlServer'"
		},
		"LS_ADLS_G2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://opnhckadlstorage.dfs.core.windows.net"
		},
		"LS_AKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://opnhckdaakv.vault.azure.net/"
		},
		"LS_Blob_Storage_Staging_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "connopnhckstorage"
		},
		"LS_Opnhckdasqldb_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "connopnhckdasqldb"
		},
		"LS_metadataDB_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "connstrmetadatadb"
		},
		"opnhckdasynapsews-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://opnhckdasynapseadlsg2.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/MoveFiles')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDataSource_Folder",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.SourceStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceStore_Directory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "CopyAFile",
									"description": "Copy a file from the source store to the destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											},
											"recursive": false
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDataDestination",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.DestinationStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.DestinationStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteAFile",
									"description": "Delete a file from the source store",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyAFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceStore_Location": {
						"type": "String"
					},
					"SourceStore_Directory": {
						"type": "String"
					},
					"DestinationStore_Location": {
						"type": "String"
					},
					"DestinationStore_Directory": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BinaryDataSource_Folder')]",
				"[concat(variables('workspaceId'), '/datasets/BinaryDataSource_File')]",
				"[concat(variables('workspaceId'), '/datasets/BinaryDataDestination')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_move_data_from_SQL_to_Staging_area')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup_metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop metadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_metadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().FULLOAD)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy Incremental Data",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "current_date_time",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().SCHEMA_NAME}.@{item().TABLE_NAME} where @{item().WATER_MARK_COLUMN} > @{concat('''',item().DATA_FETCHED_TILL_TIMESTAMP, '''')}  and @{item().WATER_MARK_COLUMN} <= @{concat('''', variables('current_get_time'),'''')}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_source_Opnhckdasqldb",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_staging_csv",
														"type": "DatasetReference",
														"parameters": {
															"directoryname": {
																"value": "@{item().SCHEMA_NAME}.@{item().TABLE_NAME}",
																"type": "Expression"
															},
															"filename": {
																"value": "@concat('Incremental_copy_',formatDateTime(convertTimeZone(utcnow(),'UTC','India Standard Time'),'yyyy-MM-ddTHHmmss'), '.csv')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "current_date_time",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "current_get_time",
													"value": {
														"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "update_water_mark_column",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy Incremental Data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[dbo].[usp_update_watermark_datetime]",
													"storedProcedureParameters": {
														"schemaName": {
															"value": {
																"value": "@{item().SCHEMA_NAME}",
																"type": "Expression"
															},
															"type": "String"
														},
														"tableName": {
															"value": {
																"value": "@{item().TABLE_NAME}",
																"type": "Expression"
															},
															"type": "String"
														},
														"watermarkValueToBeUpdated": {
															"value": {
																"value": "@variables('current_get_time')",
																"type": "Expression"
															},
															"type": "DateTime"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_metadataDB",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy Full Data",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Delete Previously Existing Files",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().SCHEMA_NAME}.@{item().TABLE_NAME}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_source_Opnhckdasqldb",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_staging_csv",
														"type": "DatasetReference",
														"parameters": {
															"directoryname": {
																"value": "@{item().SCHEMA_NAME}.@{item().TABLE_NAME}",
																"type": "Expression"
															},
															"filename": {
																"value": "@concat('Full_copy_',formatDateTime(convertTimeZone(utcnow(),'UTC','India Standard Time'),'yyyy-MM-ddTHHmmss'), '.csv')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete Previously Existing Files",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_Blob_Storage_delete_staging",
														"type": "DatasetReference",
														"parameters": {
															"Directory Name": {
																"value": "@{item().SCHEMA_NAME}.@{item().TABLE_NAME}",
																"type": "Expression"
															}
														}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "LS_Blob_Storage_Staging",
															"type": "LinkedServiceReference"
														},
														"path": "deletelogs"
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"current_get_time": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_metadata')]",
				"[concat(variables('workspaceId'), '/datasets/DS_source_Opnhckdasqldb')]",
				"[concat(variables('workspaceId'), '/datasets/DS_staging_csv')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_metadataDB')]",
				"[concat(variables('workspaceId'), '/datasets/DS_Blob_Storage_delete_staging')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_Blob_Storage_Staging')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_move_files_from_staging_to_curated')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup_metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop metadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_metadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@{item().SCHEMA_NAME}.@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"wildcardFileName": "*.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_staging_csv",
											"type": "DatasetReference",
											"parameters": {
												"directoryname": {
													"value": "@{item().SCHEMA_NAME}.@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"filename": "*.csv"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_G2_RAW",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"table_name": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"current_date": {
													"value": "@pipeline().parameters.currentDate",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete from staging",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Blob_Storage_delete_staging",
											"type": "DatasetReference",
											"parameters": {
												"Directory Name": {
													"value": "@{item().SCHEMA_NAME}.@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"currentDate": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_metadata')]",
				"[concat(variables('workspaceId'), '/datasets/DS_staging_csv')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_G2_RAW')]",
				"[concat(variables('workspaceId'), '/datasets/DS_Blob_Storage_delete_staging')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BinaryDataDestination')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "It describes the destination store.",
				"linkedServiceName": {
					"referenceName": "LS_Blob_Storage_Staging",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "String"
					},
					"Directory": {
						"type": "String"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@{dataset().Directory}",
							"type": "Expression"
						},
						"container": {
							"value": "@{dataset().Container}",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Blob_Storage_Staging')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BinaryDataSource_File')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "It describes the file in the data source store.",
				"linkedServiceName": {
					"referenceName": "LS_ADLS_G2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "String"
					},
					"Directory": {
						"type": "String"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@{dataset().Directory}",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@{dataset().Container}",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_G2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BinaryDataSource_Folder')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "It describes the folder in the data source store.",
				"linkedServiceName": {
					"referenceName": "LS_ADLS_G2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "String"
					},
					"Directory": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@{dataset().Directory}",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@{dataset().Container}",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_G2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_G2_RAW')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_G2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					},
					"current_date": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().current_date, '/', dataset().schema_name, '.', dataset().table_name)",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_G2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_Blob_Storage_delete_staging')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Blob_Storage_Staging",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory Name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "staging"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Blob_Storage_Staging')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_metadata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_metadataDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SCHEMA_NAME",
						"type": "varchar"
					},
					{
						"name": "TABLE_NAME",
						"type": "varchar"
					},
					{
						"name": "FULLOAD",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tablses_to_copy"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_metadataDB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_source_Opnhckdasqldb')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Opnhckdasqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Opnhckdasqldb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_staging_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Blob_Storage_Staging",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directoryname": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directoryname",
							"type": "Expression"
						},
						"container": "staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Blob_Storage_Staging')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_ADLS_G2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_G2_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_AKV')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_AKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_Blob_Storage_Staging')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_Blob_Storage_Staging_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_Opnhckdasqldb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_Opnhckdasqldb_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_metadataDB')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_metadataDB_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/opnhckdasynapsews-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('opnhckdasynapsews-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/opnhckdasynapsews-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('opnhckdasynapsews-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sparkpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Raw_To_Curated_Full_Load')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8c6a0de3-ab67-4bb6-b04a-b39720cf040c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/89c37dd8-94bb-4870-98e0-1cfb98c0262e/resourceGroups/openhack_data_analytics/providers/Microsoft.Synapse/workspaces/opnhckdasynapsews/bigDataPools/sparkpool",
						"name": "sparkpool",
						"type": "Spark",
						"endpoint": "https://opnhckdasynapsews.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"schema_name = \"dummy\"\r\n",
							"table_name = \"dummy\""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print ({table_name})\r\n",
							"print({schema_name})"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Curated_Full_Load')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Raw_To_Curated_Full_Load",
								"type": "NotebookReference"
							},
							"parameters": {
								"": {
									"value": ""
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "sparkpool",
								"type": "BigDataPoolReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Raw_To_Curated_Full_Load')]",
				"[concat(variables('workspaceId'), '/bigDataPools/sparkpool')]"
			]
		}
	]
}